setwd("C:\\Users\\skyo_Alex\\Desktop\\7995\\project 3")

library("fmsb")
library("EGStoolkit")
library("eha")
library("mcmc")
library("pracma")

# loading files
#########################################################################################
load(file="C:/Users/skyo_Alex/Desktop/7995/project 3/listwithshock_final.RData")
load(file="C:/Users/skyo_Alex/Desktop/7995/project 3/list_final.RData")
load(file="C:/Users/skyo_Alex/Desktop/7995/project 3/combo_final.RData")
load(file="C:/Users/skyo_Alex/Desktop/7995/project 3/ALL1.RData")
load(file="C:/Users/skyo_Alex/Desktop/7995/project 3/ALL2.RData")
load(file="C:/Users/skyo_Alex/Desktop/7995/project 3/NUM1.RData")
load(file="C:/Users/skyo_Alex/Desktop/7995/project 3/NUM2.RData")
load(file="C:/Users/skyo_Alex/Desktop/7995/project 3/Result data.RData")
#########################################################################################


#******************************************************************
# part 1 Gompertz¨CMakeham simulation function
#******************************************************************
GoMaRanVar <- function(lam,agex,m,b,Nsim){
  A <- rep(0,Nsim)
  y<-runif(Nsim,min=0,max=1)
  tz0 <- m-agex
  for (i in 1:Nsim){
    ys<- y[i]
    D <- exp((agex-m)/b)
    v <- log(1-ys)-D
    S7995_GoMaZeroSoln=function(t){
      lam*t + D*exp(t/b)+v
    }
    tz <- fzero(S7995_GoMaZeroSoln, tz0)$x
    A[i]<- tz
  }
  return(ceiling(A))
}

##########################################################################################
#part 2 : simulate interest rate and investment rate
##########################################################################################
############################################################################################
# time series previous experience
interest <- read.csv("Federal funds.csv",skip=5)
invest <- read.csv("Treasury constant maturities.csv",skip=5)
invest.1year <- read.csv("Treasury constant maturities (1 year).csv",skip=5)

# extract rate
int <-interest$RIFSPFF_N.A
inv <-invest$RIFLGFCY10_N.A
inv.1year <- invest.1year$RIFLGFCY01_N.A
int <- int/100
inv <- inv/100
inv.1year <- inv.1year/100

plot.ts(inv-int[8:60])
abline(h=0)

# certify that interest rate follows AR(1)
plot.ts(int)
plot(as.character(residuals(int)))
par(mfrow=c(1,2))
acf(int,main="ACF plot of US historical Federal funds rates")
pacf(int,main="PACF plot of US historical Federal funds rates")
mean(int) #0.0511
sd(int) #0.03486

# certify that invest rate follows AR(1)
plot.ts(inv)
acf(inv)
pacf(inv)
mean(inv) #[1] 0.06482642
sd(inv) #0.02748181

# certify that one-year invest rate follows AR(1)
plot.ts(inv.1year)
acf(inv.1year)
pacf(inv.1year)
mean(inv.1year) #0.05459811
sd(inv.1year) #0.03279532

# take log algorithm to raw data
#lint <- log(int)
#linv <- log(inv)
par(mfrow=c(1,2))
#acf(lint)
#pacf(lint)
#plot.ts(lint)
#plot.ts(linv)
#mean(lint)
#sd(lint)
# take 1st seasonal diff to ts.log
#plot.ts(diff(diff(lint),4))
#source("sarima.R")
#fit1 <- sarima(lint,1,0,0,0,1,0,4) # past model diagnostics
#fit1

# fit AR(1) to interest rate
model_AR <- arima(int, order=c(1,0,0))
model_AR 
# coefficient of AR1 0.8726  , highly significant

# fit AR(1) to invest rates data
model_AR2 <- arima(inv, order=c(1,0,0))
model_AR2   
# coefficient of AR1 0.9435  , highly significant 

# fit AR(1) to one-year invest rates data
model_AR3 <- arima(inv.1year, order=c(1,0,0))
model_AR3
# coefficient of AR1 0.9134, highly significant 

#########################################
# generating
#################################################
#install.packages("CombMSC")
#library(CombMSC)
#rv <- sarima.Sim(n=200,period=11,list(order=c(1,0,0), ar=0.9164),seasonal,rand.Gen.Fun = rnorm)
#rv2 <- exp(rv)

# ABOUT INTEREST RATE DATA
rv.int <- arima.sim(list(order=c(1,0,0), ar=c(0.8726)), n=120,sd=0.015,mean=0.0089)
rv.int <- rv.int[rv.int>0][1:100]
rv.shock <- arima.sim(list(order=c(1,0,0), ar=c(0.8726)), n=5,sd=0.005,mean=-0.00637)
seq <- rep(0,100)
seq[70:74] <- rv.shock
rv.int.withshock <- seq+rv.int
rv.int.withshock
ts.plot(rv.int.withshock,main="Yearly Interest Rate Generated with Big Shock Included",
        xlab="Time duration",ylab="Interest Rate")
abline(h=0,col="blue",lty=3)


# ABOUT INVEST RATE DATA
## note that we use basic mean=0.08
rv.inv <- arima.sim(list(order=c(1,0,0), ar=c(0.9435)), n=120,sd=0.015,mean=0.00452)
rv.inv <- rv.inv[rv.inv>0][1:100]

# ABOUT ONE-YEAR INVEST RATE DATA
rv.inv.1year <- arima.sim(list(order=c(1,0,0), ar=c(0.9134)), n=120,sd=0.015,mean=0.006928)
rv.inv.1year <- rv.inv.1year[rv.inv.1year>0][1:100]
rv.inv.1year

#########################################
### generate list
#########################################

# generate list for 100 interest rate
int.list.withshock <- list()
int.list <- list()
a <- as.vector(rep(0,100))
s <- as.vector(rep(0,100))
for (i in 1:1000){
  rv.int <- arima.sim(list(order=c(1,0,0), ar=c(0.8726)), n=125,sd=0.015,mean=0.0089)
  rv.int <- rv.int[rv.int>0][1:100]
  rv.shock <- arima.sim(list(order=c(1,0,0), ar=c(0.8726)), n=5,sd=0.005,mean=-0.00637)
  seq <- rep(0,100)
  seq[38:42] <- rv.shock
  s <- rv.int
  int.list[[i]] <- s
  rv.int.withshock <- seq+rv.int
  a <- rv.int.withshock 
  int.list.withshock[[i]] <- a
}
par(mfrow=c(1,2))
plot.ts(int.list[[1]],main="Interest Rate versus Time")
abline(h=0,col="blue")
plot.ts(int.list.withshock[[1]],main="Interest Rate with Big Shock versus Time")
abline(h=0,col="blue")

int.list <- list()

for (i in 1:100){
  rv.int <- arima.sim(list(order=c(1,0,0), ar=c(0.8726)), n=120,sd=0.015,mean=0.0089)
  rv.int <- rv.int[rv.int>0][1:100]
  s <- rv.int
  int.10.list[[i]] <- s
}

# generate list for 100 10-year-term invest rate
inv.10.list <- list()
b <- as.vector(rep(0,100))
for (i in 1:1000){
  rv.inv <- arima.sim(list(order=c(1,0,0), ar=c(0.9435)), n=180,sd=0.015,mean=0.00452)
  rv.inv <- rv.inv[rv.inv>0][1:100]
  b <- rv.inv
  inv.10.list[[i]] <- b
}


# generate list for 100 1-year-term invest rate
inv.1.list <- list()
c <- as.vector(rep(0,100))
for (i in 1:1000){
  rv.inv.1year <- arima.sim(list(order=c(1,0,0), ar=c(0.9134)), n=140,sd=0.015,mean=0.006928)
  rv.inv.1year <- rv.inv.1year[rv.inv.1year>0][1:100]
  c <- rv.inv.1year
  inv.1.list[[i]] <- c
}

inv.10.list.withshock <- inv.10.list
inv.1.list.withshock <- inv.1.list

save(int.list,inv.10.list,inv.1.list,file="list_final.RData")
save(int.list.withshock,inv.10.list.withshock,inv.1.list.withshock,file="listwithshock_final.RData")

#x <- c(rep(log(0.05),11),seq(0,189))
#for (i in 1:189){
#  x[i+11]=x[i]+rv[i]
#}
#x
#x2<-exp(x[1:200])
#x2

#install.packages("TSA")
#library(TSA)
#data(ar1.s)
ehacked <- e <- rnorm(100)
#summary(arima.sim(n=200,list(ar=c(0.2))))

#model_AR <- arima(ts.pure, order=c(1,0,0))

#install.packages("forecast")
#library(forecast)

#x <- seq(0,200)
#fit <- Arima(x,c(1,1,0),seasonal=list(order=c(1,1,0),period=11))
#sd(simulate(fit,future=F))

inv.1.list[[99]]
inv.10.list[[99]]

#########################################
# check if all values are valid
#############################################
X <- rep(0,100)
for (i in 1:1000){
  X[i] <- sum(is.na(int.list[[i]]!=0))
}
X
sum(X==0)

C <- rep(0,100)
for (i in 1:1000){
  C[i] <- sum(is.na(int.list.withshock[[i]]!=0))
}
X
sum(C==0)

Y <- rep(0,100)
for (i in 1:1000){
  Y[i] <- sum(is.na(inv.1.list[[i]]!=0))
}
sum(Y==0)

Z <- rep(0,100)
for (i in 1:1000){
  Z[i] <- sum(is.na(inv.10.list[[i]]!=0))
}
sum(Z==0)

co <- rep(0,100)
for (i in 1:1000){
  co[i] <- sum(is.na(combo[[i]]!=0))
}
sum(co==0)

long <- rnorm(150,mean=0.06483,sd=0.027)
long[[1]]<-long[long>0][1:100]
long[long>0][1:100]
long[[1]]

combo <- list()
long <-list()
short<-list()
company<-list()
stock<-list()
co <- as.vector(rep(0,100))
for (i in 1:1000){
  combo[[i]]<-as.vector(rep(0,100))
  long[[i]]<-as.vector(rep(0,100))
  short[[i]]<-as.vector(rep(0,100))
  company[[i]]<-as.vector(rep(0,100))
  stock[[i]]<-as.vector(rep(0,100))
  long.1 <- rnorm(180,mean=0.06483,sd=0.027)
  long[[i]]<-long.1[long.1>0][1:100]
  short.1 <- rnorm(180,mean=0.0511,sd=0.03486)
  short[[i]]<-short.1[short.1>0][1:100]
  company.1 <- rnorm(180,mean=0.1,sd=0.2)
  company[[i]]<-company.1[company.1>0][1:100]
  stock[[i]] <- rnorm(100,mean=0.2,sd=2)
  combo[[i]] <- 0.5*short[[i]]+0.3*long[[i]]+0.1*company[[i]]+0.1*stock[[i]]
}

for(i in 1:100)
{
  combo[[i]]<-0.5*short[[i]]+0.3*long[[i]]+0.1*company[[i]]+0.1*stock[[i]]
}


long <- rnorm(150,mean=0.06483,sd=0.027)
long<-long[long>0][1:100]
short <- rnorm(150,mean=0.0511,sd=0.03486)
short<-short[short>0][1:100]
company <- rnorm(150,mean=0.1,sd=0.2)
company<-company[company>0][1:100]
stock <- rnorm(300,mean=0.2,sd=2)
combo <- 0.5*short+0.3*long+0.1*company+0.1*stock
combo <- list()

combo[[1]]
save(combo,file="combo_final.RData") 

##########################################################################################
# part 3 simulate original data : situation 1 and situation 2
##########################################################################################

#******************************************************************************
# situation 1 conclude one economic shock but not the disease
#******************************************************************************
ALL1<-list()
NUM1<-list()
Num.int <- 1000
#******************************************************************************
for (u in 1:1000){

a <- matrix(0, nrow=9,ncol=3)
b <- matrix(0, nrow=9,ncol=3)
c <- matrix(0, nrow=9,ncol=2)
d <- matrix(0, nrow=9,ncol=3)
for (i in 1:9){              # 9 economic cycle
    a[i,]<-rpois(3,50)       # growth
    b[i,]<-rpois(3,20)       # depression
    c[i,]<-rpois(2,45)       # bottom
    d[i,]<-rpois(3,30)       # recovery
}
  A<-rpois(1,40)
  B<-rpois(2,16)
  C<-rpois(5,20)
  D<-rpois(3,24)  
Num.M<- as.vector(t(cbind(a,b,c,d)))
Num.M[67:77]<-c(A,B,C,D)
Num.Mt<-Num.M

#********************************
a <- matrix(0, nrow=9,ncol=3)
b <- matrix(0, nrow=9,ncol=3)
c <- matrix(0, nrow=9,ncol=2)
d <- matrix(0, nrow=9,ncol=3)
for (i in 1:9){
  a[i,]<-rpois(3,50)
  b[i,]<-rpois(3,20)
  c[i,]<-rpois(2,45)
  d[i,]<-rpois(3,30) 
}
A<-rpois(1,40)
B<-rpois(2,16)
C<-rpois(5,20)
D<-rpois(3,24)  
Num.F<- as.vector(t(cbind(a,b,c,d)))
Num.F[34:44]<-c(A,B,C,D)
Num.Ft<-Num.F

#*****************************************************************
Num.t<-Num.M+Num.F

#*******************************************************************
Male.int <- GoMaRanVar(0.01,30,85,10,Num.int) #initial number
Female.int<- GoMaRanVar(0.01,30,88.5,10,Num.int)

Male.all <- matrix(0,nrow=100,ncol=Num.int)
Male.all[1,] <- GoMaRanVar(0.01,30,85,10,Num.int)

Female.all<- matrix(0,nrow=100,ncol=Num.int)
Female.all[1,] <- GoMaRanVar(0.01,30,88.5,10,Num.int)

for (i in 1:99){
  if (Num.M[i]!=0){
    for (j in 1:Num.M[i]){
      Male.all[(i+1),j]<-GoMaRanVar(0.01,30,85,10,Num.M[i])[j]+i
  }   
  }
  else if (Num.M[i]==0){
    Male.all[(i+1),]<-Male.all[(i+1),]
  }
}

for (i in 1:99){
  if (Num.F[i]!=0){
    for (j in 1:Num.F[i]){
      Female.all[(i+1),j]<-GoMaRanVar(0.01,30,88.5,10,Num.F[i])[j]+i
    }   
  }
  else if (Num.M[i]==0){
    Female.all[(i+1),]<-Female.all[(i+1),]
  }
}
  
data.M <- matrix(0,nrow=100, ncol=max(Male.all))
for (i in 1:100){
  for (j in 1:max(Male.all)){
    data.M[i,j]<-length(which(Male.all[i,]==j))
  }  
}
data.Mt <-data.M[,1:100]

data.F <- matrix(0,nrow=100, ncol=max(Female.all))
for (i in 1:100){
  for (j in 1:max(Female.all)){
    data.F[i,j]<-length(which(Female.all[i,]==j))
  }  
}
data.Ft <-data.F[,1:100]

data<-matrix(0,nrow=100, ncol=100)
for (p in 1:100){
  for (q in 1:100){
    data[p,q]<-data.Ft[p,q]+data.Mt[p,q]
  }
}

 ALL1[[u]]<-data
 NUM1[[u]]<-Num.t 
}

#******************************************************************************
# situation 2 conclude the two period with vital disease but not economic shock
#******************************************************************************
ALL2<-list()
NUM2<-list()
Num.int <- 1000

for (u in 1:1000){
  
  a <- matrix(0, nrow=9,ncol=3)
  b <- matrix(0, nrow=9,ncol=3)
  c <- matrix(0, nrow=9,ncol=2)
  d <- matrix(0, nrow=9,ncol=3)
  for (i in 1:9){
    a[i,]<-rpois(3,50)
    b[i,]<-rpois(3,20)
    c[i,]<-rpois(2,45)
    d[i,]<-rpois(3,30) 
  }
  E<-rpois(5,60)
  G<-rpois(5,30)
  
  Num.M<- as.vector(t(cbind(a,b,c,d)))
  Num.M[12:16]<-c(E)
  Num.M[71:75]<-c(G)
  Num.Mt<-Num.M
  
  #*****************************************************************
  a <- matrix(0, nrow=9,ncol=3)
  b <- matrix(0, nrow=9,ncol=3)
  c <- matrix(0, nrow=9,ncol=2)
  d <- matrix(0, nrow=9,ncol=3)
  
  for (i in 1:9){
    a[i,]<-rpois(3,50)
    b[i,]<-rpois(3,20)
    c[i,]<-rpois(2,45)
    d[i,]<-rpois(3,30) 
  }
  E<-rpois(5,60)
  G<-rpois(5,30)  
  Num.F<- as.vector(t(cbind(a,b,c,d)))
  Num.F[12:16]<-c(E)
  Num.F[71:75]<-c(G)
  Num.Ft<-Num.F
  
  Num.t<-Num.M+Num.F
  
  Male.int <- GoMaRanVar(0.012,30,83,10,Num.int)
  Female.int<- GoMaRanVar(0.012,30,86.5,10,Num.int)
  
  Male.all <- matrix(0,nrow=100,ncol=Num.int)
  Male.all[1,] <- GoMaRanVar(0.012,30,83,10,Num.int)
  
  Female.all<- matrix(0,nrow=100,ncol=Num.int)
  Female.all[1,] <- GoMaRanVar(0.012,30,86.5,10,Num.int)
  
  for (i in 1:99){
    if (Num.M[i]!=0){
      for (j in 1:Num.M[i]){
        Male.all[(i+1),j]<-GoMaRanVar(0.012,30,83,10,Num.M[i])[j]+i
      }   
    }
    else if (Num.M[i]==0){
      Male.all[(i+1),]<-Male.all[(i+1),]
    }
  }
  
  for (i in 1:99){
    if (Num.F[i]!=0){
      for (j in 1:Num.F[i]){
        Female.all[(i+1),j]<-GoMaRanVar(0.012,30,86.5,10,Num.F[i])[j]+i
      }   
    }
    else if (Num.M[i]==0){
      Female.all[(i+1),]<-Female.all[(i+1),]
    }
  }
  
  data.M <- matrix(0,nrow=100, ncol=max(Male.all))
  for (i in 1:100){
    for (j in 1:max(Male.all)){
      data.M[i,j]<-length(which(Male.all[i,]==j))
    }  
  }
  data.Mt <-data.M[,1:100]
  
  data.F <- matrix(0,nrow=100, ncol=max(Female.all))
  for (i in 1:100){
    for (j in 1:max(Female.all)){
      data.F[i,j]<-length(which(Female.all[i,]==j))
    }  
  }
  data.Ft <-data.F[,1:100]
  
  data<-matrix(0,nrow=100, ncol=100)
  for (p in 1:100){
    for (q in 1:100){
      data[p,q]<-data.Ft[p,q]+data.Mt[p,q]
    }
  }
  
  ALL2[[u]]<-data
  NUM2[[u]]<-Num.t
}

#########################################################################################
#part 4: analysis
#########################################################################################

#******************************************************************************
# situation 1 conclude one economic shock but not the disease
#******************************************************************************

#############
# n.new1
################
n.new1<-list()

for (i in 1:1000)
{
  n.new1[[i]]<-c(2000,NUM1[[i]])
}

#############################
#n.over
##############################
n.over1<-list()

D<-matrix(0,ncol=100,nrow=100)

for (i in 1:1000)
{
  n.over1[[i]]<-as.vector(rep(0,100))
  for (iCOL in 1:100)
  {
    for (iROW in 1:100)
    {
      if ((iCOL-iROW)<10)
      {D[iROW,iCOL]<-0}
      else
      {D[iROW,iCOL]<-ALL1[[i]][iROW,iCOL]}
    }
    Z<-sum(D[,iCOL])
    n.over1[[i]][iCOL]<-Z
  }
}

#############################
#price
#############################
###################################

p.all1<-as.vector(rep(0,1000))
discount<-as.vector(rep(0,100))
p.sum <- list()

for (i in 1:1000)
{p.sum[[i]]<-as.vector(rep(NA,100))
 for (year in 1:100)
 {
   if(year==1)
   {discount[year]<-1
    p.sum[[i]][year]<-n.over1[[i]][year]*1000000/discount[year]}
   else
   {discount[year]<-discount[year-1]*(1+int.list[[i]][year-1])
    p.sum[[i]][year]<-p.sum[[i]][year-1]+n.over1[[i]][year]*1000000/discount[year]}
 }
 p.all1[i]<-p.sum[[i]][100]/sum(n.over1[[i]])
}

p.test<-seq(from=0,to=max(p.all1),1000)
range <-length(seq(from=0,to=max(p.all1),1000))

bank.detail1<-list()
bankrupt.Result1<-matrix(0,nrow=range,ncol=1000)
bankrupt.year.Result1<-matrix(0,nrow=range,ncol=1000)
pr.Result1<- as.vector(rep(0,range))

bank.c.detail1<-list()
bankrupt.Result.c1<-matrix(0,nrow=range,ncol=1000)
bankrupt.year.Result.c1<-matrix(0,nrow=range,ncol=1000)
pr.Result.c1<- as.vector(rep(0,range))

bank.A.detail1<-list()
bankrupt.Result.A1<-matrix(0,nrow=range,ncol=1000)
bankrupt.year.Result.A1<-matrix(0,nrow=range,ncol=1000)
pr.Result.A1<- as.vector(rep(0,range))

#for simple
value<-list()
value.in<-list()
value.out<-list()
bankrupt<-list()
bankrupt.result<-as.vector(rep(NA,1000))
discount<-as.vector(rep(NA,100))

#for complicate
value.risk<-list()
value.norisk<-list()
value.in<-list()
value.out<-list()
value.1<-list()
value.2<-list()
bankrupt.c<-list()
bankrupt.c.result<-as.vector(rep(NA,1000))

#for CAPM
bankrupt.A<-list()
bankrupt.A.result<-as.vector(rep(NA,1000))

#########################################################################################
#***********************************************************
#bankrupt simple
#***********************************************************
for (k in 1:range){
  p<-p.test[k]
  for (i in 1:1000)
  {
    value[[i]]<-as.vector(rep(NA,100))
    value.in[[i]]<-as.vector(rep(NA,100))
    value.out[[i]]<-as.vector(rep(NA,100))
    bankrupt[[i]]<-as.vector(rep(NA,100))
    for (year in 1:100)
    {
      if (year!=1)
      {discount[year]<-discount[year-1]*(1+int.list.withshock[[i]][year-1])
       value.in[[i]][year]<-p*discount[year]*n.new1[[i]][year]+value[[i]][year-1]*inv.1.list.withshock[[i]][year]
       value.out[[i]][year]<-n.over1[[i]][year]*1000000
       value[[i]][year]<-value[[i]][year-1]+value.in[[i]][year]-value.out[[i]][year]}
      else
      {discount[year]<-1
       value.in[[i]][year]<-p*discount[year]*n.new1[[i]][year]
       value.out[[i]][year]<-n.over1[[i]][year]*1000000
       value[[i]][year]<-value.in[[i]][year]-value.out[[i]][year]}
      if (value[[i]][year]>=0)
      {bankrupt[[i]][year]<-0
      } 
      else
      {bankrupt[[i]][year]<-1
      }
    }
    if (sum(bankrupt[[i]])>0)
    {bankrupt.result[i]<-1}
    else
    {bankrupt.result[i]<-0}
  }
  bank.detail1[[k]]<- bankrupt
  bankrupt.Result1[k,] <- bankrupt.result
  pr.Result1[k] <- sum(bankrupt.result)/1000
}

#***********************************************************
#bankrupt complicate
#***********************************************************
for (k in 1:range){
  p<-p.test[k]
  
  for (i in 1:1000)
  {
    value.risk[[i]]<-as.vector(rep(NA,100))
    value.norisk[[i]]<-as.vector(rep(NA,100))
    value.in[[i]]<-as.vector(rep(NA,100))
    value.out[[i]]<-as.vector(rep(NA,100))
    value.1[[i]]<-as.vector(rep(NA,100))
    value.2[[i]]<-as.vector(rep(NA,100))
    bankrupt.c[[i]]<-as.vector(rep(NA,100))
    for (year in 1:100)
    {
      if (year!=1)
      {discount[year]<-discount[year-1]*(1+int.list.withshock[[i]][year-1])
       if ((year%%10)==1)
       {
         value.in[[i]][year]<-p*discount[year]*n.new1[[i]][year]+value.norisk[[i]][year-1]*int.list.withshock[[i]][year]+value.risk[[i]][year-1]*inv.10.list.withshock[[i]][year-10]
         value.out[[i]][year]<-n.over1[[i]][year]*1000000
         value.1[[i]][year]<-value.1[[i]][year-1]+value.in[[i]][year]-value.out[[i]][year]
         value.risk[[i]][year]<-0.5*value.1[[i]][year]
         value.norisk[[i]][year]<-0.5*value.1[[i]][year]
         value.2[[i]][year]<-value.risk[[i]][year]+value.norisk[[i]][year]
       }
       else
       { 
         value.in[[i]][year]<-p*discount[year]*n.new1[[i]][year]+value.norisk[[i]][year-1]*int.list.withshock[[i]][year]
         value.out[[i]][year]<-n.over1[[i]][year]*1000000
         value.1[[i]][year]<-value.1[[i]][year-1]+value.in[[i]][year]-value.out[[i]][year]
         value.risk[[i]][year]<-value.risk[[i]][year-1]
         value.norisk[[i]][year]<-value.norisk[[i]][year-1]+value.in[[i]][year]-value.out[[i]][year]
         value.2[[i]][year]<-value.risk[[i]][year]+value.norisk[[i]][year] 
       }
      }
      else
      { discount[year]<-1
        value.in[[i]][year]<-p*discount[year]*n.new1[[i]][year]
        value.out[[i]][year]<-n.over1[[i]][year]*1000000
        value.1[[i]][year]<-value.in[[i]][year]-value.out[[i]][year]
        value.risk[[i]][year]<-0.5*value.1[[i]][year]
        value.norisk[[i]][year]<-0.5*value.1[[i]][year]
        value.2[[i]][year]<-value.risk[[i]][year]+value.norisk[[i]][year]
      }
      if (value.1[[i]][year]>=0)
      {bankrupt.c[[i]][year]<-0} 
      else
      {bankrupt.c[[i]][year]<-1
      }
    }
    if (sum(bankrupt.c[[i]])>0)
    {bankrupt.c.result[i]<-1}
    else
    {bankrupt.c.result[i]<-0}
  }
  bank.c.detail1[[k]]<-bankrupt.c
  bankrupt.Result.c1[k,] <- bankrupt.c.result
  pr.Result.c1[k] <- sum(bankrupt.c.result)/1000
}

#***********************************************************
#bankrupt simple with CAPM
#***********************************************************
for (k in 1:range){
  p<-p.test[k]
  
  for (i in 1:1000)
  {
    value[[i]]<-as.vector(rep(NA,100))
    value.in[[i]]<-as.vector(rep(NA,100))
    value.out[[i]]<-as.vector(rep(NA,100))
    bankrupt.A[[i]]<-as.vector(rep(NA,100))
    for (year in 1:100)
    {
      if (year!=1)
      {discount[year]<-discount[year-1]*(1+int.list.withshock[[i]][year-1])
       value.in[[i]][year]<-p*discount[year]*n.new1[[i]][year]+value[[i]][year-1]*combo[[i]][year]
       value.out[[i]][year]<-n.over1[[i]][year]*1000000
       value[[i]][year]<-value[[i]][year-1]+value.in[[i]][year]-value.out[[i]][year]}
      else
      {discount[year]<-1
       value.in[[i]][year]<-p*discount[year]*n.new1[[i]][year]
       value.out[[i]][year]<-n.over1[[i]][year]*1000000
       value[[i]][year]<-value.in[[i]][year]-value.out[[i]][year]}
      if (value[[i]][year]>=0)
      {bankrupt.A[[i]][year]<-0} 
      else
      {bankrupt.A[[i]][year]<-1}
    }
    if (sum(bankrupt.A[[i]])>0)
    {bankrupt.A.result[i]<-1}
    else
    {bankrupt.A.result[i]<-0}
  }
  bank.A.detail1[[k]]<-bankrupt.A
  bankrupt.Result.A1[k,] <- bankrupt.A.result
  pr.Result.A1[k] <- sum(bankrupt.A.result)/1000
}

scenario1.result<-list(ALL1=ALL1,NUM1=NUM1,n.new1=n.new1,n.over1=n.over1,
                       p.all1=p.all1,pr.Result1=pr.Result1,pr.Result.A1=pr.Result.A1,
                       pr.Result.c1=pr.Result.c1)

##########################################################################################

#******************************************************************************
# situation 2 conclude the two period with vital disease but not economic shock
#******************************************************************************

#############
#n.new2
#############################
n.new2<-list()

for (i in 1:1000)
{
  n.new2[[i]]<-c(2000,NUM2[[i]])
}

##############################################
#n.over2
#############################################
n.over2<-list()
D<-matrix(0,ncol=100,nrow=100)

for (i in 1:1000)
{
  n.over2[[i]]<-as.vector(rep(0,100))
  for (iCOL in 1:100)
  {
    for (iROW in 1:100)
    {
      if ((iCOL-iROW)<10)
      {D[iROW,iCOL]<-0}
      else
      {D[iROW,iCOL]<-ALL2[[i]][iROW,iCOL]}
    }
    Z<-sum(D[,iCOL])
    n.over2[[i]][iCOL]<-Z
  }
}

##############################################
#price
###################################

p.all2<-as.vector(rep(0,1000))
discount<-as.vector(rep(0,100))

for (i in 1:1000)
{p.sum[[i]]<-as.vector(rep(NA,100))
 for (year in 1:100)
 {
   if(year==1)
   {discount[year]<-1
    p.sum[[i]][year]<-n.over2[[i]][year]*1000000/discount[year]}
   else
   {discount[year]<-discount[year-1]*(1+int.list[[i]][year-1])
    p.sum[[i]][year]<-p.sum[[i]][year-1]+n.over2[[i]][year]*1000000/discount[year]}
 }
 p.all2[i]<-p.sum[[i]][100]/sum(n.over2[[i]])
}

p.test<-seq(from=0, to=max(p.all2),1000)
range <-length(seq(from=0, to=max(p.all2),1000))

bank.detail2<-list()
bankrupt.Result2<-matrix(0,nrow=range,ncol=1000)
bankrupt.year.Result2<-matrix(0,nrow=range,ncol=1000)
pr.Result2<- as.vector(rep(0,range))

bank.c.detail2<-list()
bankrupt.Result.c2<-matrix(0,nrow=range,ncol=1000)
bankrupt.year.Result.c2<-matrix(0,nrow=range,ncol=1000)
pr.Result.c2<- as.vector(rep(0,range))

bank.A.detail2<-list()
bankrupt.Result.A2<-matrix(0,nrow=range,ncol=1000)
bankrupt.year.Result.A2<-matrix(0,nrow=range,ncol=1000)
pr.Result.A2<- as.vector(rep(0,range))

#for simple
value<-list()
value.in<-list()
value.out<-list()
bankrupt<-list()
bankrupt.result<-as.vector(rep(NA,1000))
discount<-as.vector(rep(NA,100))

#for complicate
value.risk<-list()
value.norisk<-list()
value.in<-list()
value.out<-list()
value.1<-list()
value.2<-list()
bankrupt.c<-list()
bankrupt.c.result<-as.vector(rep(NA,1000))

#for CAPM
bankrupt.A<-list()
bankrupt.A.result<-as.vector(rep(NA,1000))
########################################################
#*******************************************************
#bankrupt simple
#*******************************************************
for (k in 1:range){
  p<-p.test[k]
  for (i in 1:1000)
  {
    value[[i]]<-as.vector(rep(NA,100))
    value.in[[i]]<-as.vector(rep(NA,100))
    value.out[[i]]<-as.vector(rep(NA,100))
    bankrupt[[i]]<-as.vector(rep(NA,100))
    for (year in 1:100)
    {
      if (year!=1)
      {discount[year]<-discount[year-1]*(1+int.list[[i]][year-1])
       value.in[[i]][year]<-p*discount[year]*n.new2[[i]][year]+value[[i]][year-1]*inv.1.list[[i]][year]
       value.out[[i]][year]<-n.over2[[i]][year]*1000000
       value[[i]][year]<-value[[i]][year-1]+value.in[[i]][year]-value.out[[i]][year]}
      else
      {discount[year]<-1
       value.in[[i]][year]<-p*discount[year]*n.new2[[i]][year]
       value.out[[i]][year]<-n.over2[[i]][year]*1000000
       value[[i]][year]<-value.in[[i]][year]-value.out[[i]][year]}
      if (value[[i]][year]>=0)
      {bankrupt[[i]][year]<-0
      } 
      else
      {bankrupt[[i]][year]<-1
      }
    }
    if (sum(bankrupt[[i]])>0)
    {bankrupt.result[i]<-1}
    else
    {bankrupt.result[i]<-0}
  }
  bank.detail2[[k]]<- bankrupt
  bankrupt.Result2[k,] <- bankrupt.result
  pr.Result2[k] <- sum(bankrupt.result)/1000
}

#*******************************************************
#bankrupt complicate
#*******************************************************
for (k in 1:range){
  p<-p.test[k]
  
  for (i in 1:1000)
  {
    value.risk[[i]]<-as.vector(rep(NA,100))
    value.norisk[[i]]<-as.vector(rep(NA,100))
    value.in[[i]]<-as.vector(rep(NA,100))
    value.out[[i]]<-as.vector(rep(NA,100))
    value.1[[i]]<-as.vector(rep(NA,100))
    value.2[[i]]<-as.vector(rep(NA,100))
    bankrupt.c[[i]]<-as.vector(rep(NA,100))
    for (year in 1:100)
    {
      if (year!=1)
      {discount[year]<-discount[year-1]*(1+int.list[[i]][year-1])
       if ((year%%10)==1)
       {
         value.in[[i]][year]<-p*discount[year]*n.new2[[i]][year]+value.norisk[[i]][year-1]*int.list[[i]][year]+value.risk[[i]][year-1]*inv.10.list[[i]][year-10]
         value.out[[i]][year]<-n.over2[[i]][year]*1000000
         value.1[[i]][year]<-value.1[[i]][year-1]+value.in[[i]][year]-value.out[[i]][year]
         value.risk[[i]][year]<-0.5*value.1[[i]][year]
         value.norisk[[i]][year]<-0.5*value.1[[i]][year]
         value.2[[i]][year]<-value.risk[[i]][year]+value.norisk[[i]][year]
       }
       else
       { 
         value.in[[i]][year]<-p*discount[year]*n.new2[[i]][year]+value.norisk[[i]][year-1]*int.list[[i]][year]
         value.out[[i]][year]<-n.over2[[i]][year]*1000000
         value.1[[i]][year]<-value.1[[i]][year-1]+value.in[[i]][year]-value.out[[i]][year]
         value.risk[[i]][year]<-value.risk[[i]][year-1]
         value.norisk[[i]][year]<-value.norisk[[i]][year-1]+value.in[[i]][year]-value.out[[i]][year]
         value.2[[i]][year]<-value.risk[[i]][year]+value.norisk[[i]][year] 
       }
      }
      else
      { discount[year]<-1
        value.in[[i]][year]<-p*discount[year]*n.new2[[i]][year]
        value.out[[i]][year]<-n.over2[[i]][year]*1000000
        value.1[[i]][year]<-value.in[[i]][year]-value.out[[i]][year]
        value.risk[[i]][year]<-0.5*value.1[[i]][year]
        value.norisk[[i]][year]<-0.5*value.1[[i]][year]
        value.2[[i]][year]<-value.risk[[i]][year]+value.norisk[[i]][year]
      }
      if (value.1[[i]][year]>=0)
      {bankrupt.c[[i]][year]<-0} 
      else
      {bankrupt.c[[i]][year]<-1
      }
    }
    if (sum(bankrupt.c[[i]])>0)
    {bankrupt.c.result[i]<-1}
    else
    {bankrupt.c.result[i]<-0}
  }
  bank.c.detail2[[k]]<-bankrupt.c
  bankrupt.Result.c2[k,] <- bankrupt.c.result
  pr.Result.c2[k] <- sum(bankrupt.c.result)/1000
}

#*******************************************************
#bankrupt simple with CAPM
#*******************************************************
for (k in 1:range){
  p<-p.test[k]
  
  for (i in 1:1000)
  {
    value[[i]]<-as.vector(rep(NA,100))
    value.in[[i]]<-as.vector(rep(NA,100))
    value.out[[i]]<-as.vector(rep(NA,100))
    bankrupt.A[[i]]<-as.vector(rep(NA,100))
    for (year in 1:100)
    {
      if (year!=1)
      {discount[year]<-discount[year-1]*(1+int.list[[i]][year-1])
       value.in[[i]][year]<-p*discount[year]*n.new2[[i]][year]+value[[i]][year-1]*combo[[i]][year]
       value.out[[i]][year]<-n.over2[[i]][year]*1000000
       value[[i]][year]<-value[[i]][year-1]+value.in[[i]][year]-value.out[[i]][year]}
      else
      {discount[year]<-1
       value.in[[i]][year]<-p*discount[year]*n.new2[[i]][year]
       value.out[[i]][year]<-n.over2[[i]][year]*1000000
       value[[i]][year]<-value.in[[i]][year]-value.out[[i]][year]}
      if (value[[i]][year]>=0)
      {bankrupt.A[[i]][year]<-0} 
      else
      {bankrupt.A[[i]][year]<-1}
    }
    if (sum(bankrupt.A[[i]])>0)
    {bankrupt.A.result[i]<-1}
    else
    {bankrupt.A.result[i]<-0}
  }
  bank.A.detail2[[k]]<-bankrupt.A
  bankrupt.Result.A2[k,] <- bankrupt.A.result
  pr.Result.A2[k] <- sum(bankrupt.A.result)/1000
}

scenario2.result<-list(ALL2=ALL2,NUM2=NUM2,n.new2=n.new2,n.over2=n.over2,
                       p.all2=p.all2,pr.Result2=pr.Result2,pr.Result.A2=pr.Result.A2,
                       pr.Result.c2=pr.Result.c2)

#######################################################################################
#part 5, result and plot
#######################################################################################

#check the bankrupt of year (bankrupt at the end of the year)
#####################################################################
range1 <-length(seq(from=0, to=max(p.all1),1000))

bank.year1 <- matrix(0,nrow=range1,ncol=1000)
for (i in 1:range1){
  for (j in 1:1000){
    for (m in 1:100){
    if (bank.detail1[[i]][[j]][m]==0){
      bank.year1[i,j]<-0
    }
    else{
    bank.year1[i,j]<-min(which((bank.detail1[[i]][[j]])==1))
     }
    }
  } 
}

bank.year.c1 <- matrix(0,nrow=range1,ncol=1000)
for (i in 1:range1){
  for (j in 1:1000){
    for (m in 1:100){
      if (bank.c.detail1[[i]][[j]][m]==0){
        bank.year.c1[i,j]<-0
      }
      else{
        bank.year.c1[i,j]<-min(which((bank.c.detail1[[i]][[j]])==1))
      }
    }
  } 
}


bank.year.A1 <- matrix(0,nrow=range1,ncol=1000)
for (i in 1:range1){
  for (j in 1:1000){
    for (m in 1:100){
      if (bank.A.detail1[[i]][[j]][m]==0){
        bank.year.A1[i,j]<-0
      }
      else{
        bank.year.A1[i,j]<-min(which((bank.A.detail1[[i]][[j]])==1))
      }
    }
  } 
}

#******************************************************************
range2 <-length(seq(from=0, to=max(p.all2),1000))

bank.year2 <- matrix(0,nrow=range2,ncol=1000)
for (i in 1:range2){
  for (j in 1:1000){
    for (m in 1:100){
      if (bank.detail2[[i]][[j]][m]==0){
        bank.year2[i,j]<-0
      }
      else{
        bank.year2[i,j]<-min(which((bank.detail2[[i]][[j]])==1))
      }
    }
  } 
}

bank.year.c2 <- matrix(0,nrow=range2,ncol=1000)
for (i in 1:range2){
  for (j in 1:1000){
    for (m in 1:100){
      if (bank.c.detail2[[i]][[j]][m]==0){
        bank.year.c2[i,j]<-0
      }
      else{
        bank.year.c2[i,j]<-min(which((bank.c.detail2[[i]][[j]])==1))
      }
    }
  } 
}


bank.year.A2 <- matrix(0,nrow=range2,ncol=1000)
for (i in 1:range2){
  for (j in 1:1000){
    for (m in 1:100){
      if (bank.A.detail2[[i]][[j]][m]==0){
        bank.year.A2[i,j]<-0
      }
      else{
        bank.year.A2[i,j]<-min(which((bank.A.detail2[[i]][[j]])==1))
      }
    }
  } 
}

########################################################################
#plot
#########################################################################
par(mfrow=c(3,1))

plot.ts(y=pr.Result1,x=1000*seq(from=0,to=193,1),type="l",xlab="price",ylab="Probability");abline(v=1000*(min(which(pr.Result1==0)-1)),col="red") #i=104
abline(v=1000*(min(which(pr.Result1<=0.1)-1)),col="red")
abline(h =seq(from=0,to=1,0.1), v = 1000*seq(from=-10,to=200,1), col = "lightgray", lty = 3)
text(103000,0, "abline(price = 103000)", col = "blue", adj = c(0.5, -.1),font=9,cex=2)

plot.ts(y=pr.Result.c1,x=1000*seq(from=0,to=193,1),type="l",xlab="price",ylab="Probability");abline(v=1000*(min(which(pr.Result.c1==0)-1)),col="red") #i=188
abline(h =seq(from=0,to=1,0.1), v = 1000*seq(from=-10,to=200,1), col = "lightgray", lty = 3)
abline(v=1000*(min(which(pr.Result.c1<=0.1)-1)),col="red")
text(187000,0, "abline(price = 187000)", col = "blue", adj = c(0.5, -.1),font=9,cex=2)

plot.ts(y=pr.Result.A1,x=1000*seq(from=0,to=193,1),type="l",xlab="price",ylab="Probability");abline(v=1000*(min(which(pr.Result.A1==0)-1)),col="red") #i=180
abline(v=1000*(min(which(pr.Result.A1<=0.1)-1)),col="red")
abline(h =seq(from=0,to=1,0.1), v = 1000*seq(from=-10,to=200,1), col = "lightgray", lty = 3)
text(179000,0, "abline(price = 179000)", col = "blue", adj = c(0.5, -.1),font=9,cex=2)



plot.ts(y=pr.Result2,x=1000*seq(from=0,to=201,1),type="l",xlab="price",ylab="Probability");abline(v=1000*(min(which(pr.Result2==0)-1)),col="red") #i=62
abline(v=1000*(min(which(pr.Result2<=0.1)-1)),col="red")
abline(h =seq(from=0,to=1,0.1), v = 1000*seq(from=-10,to=210,1), col = "lightgray", lty = 3)
text(61000,0, "abline(price = 61000)", col = "blue", adj = c(0.5, -.1),font=9,cex=2)

plot.ts(y=pr.Result.c2,x=1000*seq(from=0,to=201,1),type="l",xlab="price",ylab="Probability");abline(v=1000*(min(which(pr.Result.c2==0)-1)),col="red") #i=103
abline(v=1000*(min(which(pr.Result.c2<=0.1)-1)),col="red")
abline(h =seq(from=0,to=1,0.1), v = 1000*seq(from=-10,to=210,1), col = "lightgray", lty = 3)
text(102000,0, "abline(price = 102000)", col = "blue", adj = c(0.5, -.1),font=9,cex=2)

plot.ts(y=pr.Result.A2,x=1000*seq(from=0,to=201,1),type="l",xlab="price",ylab="Probability");abline(v=1000*(min(which(pr.Result.A2==0)-1)),col="red") #i=114
abline(v=1000*(min(which(pr.Result.A2<=0.1)-1)),col="red")
abline(h =seq(from=0,to=1,0.1), v = 1000*seq(from=-10,to=210,1), col = "lightgray", lty = 3)
text(113000,0, "abline(price = 113000)", col = "blue", adj = c(0.5, -.1),font=9,cex=2)



##########################################
# cash flow
##########################################

##########################################
# situation 1
##########################################

#######################################################
p.test<-seq(from=0, to=max(p.all1),1000)
p<-p.test[104]
for (i in 1:1000)
{
  value[[i]]<-as.vector(rep(NA,100))
  value.in[[i]]<-as.vector(rep(NA,100))
  value.out[[i]]<-as.vector(rep(NA,100))
  bankrupt[[i]]<-as.vector(rep(NA,100))
  for (year in 1:100)
  {
    if (year!=1)
    {discount[year]<-discount[year-1]*(1+int.list.withshock[[i]][year-1])
     value.in[[i]][year]<-p*discount[year]*n.new1[[i]][year]+value[[i]][year-1]*inv.1.list.withshock[[i]][year]
     value.out[[i]][year]<-n.over1[[i]][year]*1000000
     value[[i]][year]<-value[[i]][year-1]+value.in[[i]][year]-value.out[[i]][year]}
    else
    {discount[year]<-1
     value.in[[i]][year]<-p*discount[year]*n.new1[[i]][year]
     value.out[[i]][year]<-n.over1[[i]][year]*1000000
     value[[i]][year]<-value.in[[i]][year]-value.out[[i]][year]}
    if (value[[i]][year]>=0)
    {bankrupt[[i]][year]<-0
    } 
    else
    {bankrupt[[i]][year]<-1
    }
  }
  if (sum(bankrupt[[i]])>0)
  {bankrupt.result[i]<-1}
  else
  {bankrupt.result[i]<-0}
}
par(mfrow=c(3,1))
plot.ts(value[[500]][1:100]);abline(h=0,col="red")
plot.ts(value.in[[500]][1:100]);abline(h=0,col="red")
plot.ts(value.out[[500]][1:100]);abline(h=0,col="red")

p<-p.test[20] # at the beginning, the company's capital is used up. However, in the end, it gets back on track.11
for (i in 1:1000)
{
  value[[i]]<-as.vector(rep(NA,100))
  value.in[[i]]<-as.vector(rep(NA,100))
  value.out[[i]]<-as.vector(rep(NA,100))
  bankrupt[[i]]<-as.vector(rep(NA,100))
  for (year in 1:100)
  {
    if (year!=1)
    {discount[year]<-discount[year-1]*(1+int.list.withshock[[i]][year-1])
     value.in[[i]][year]<-p*discount[year]*n.new1[[i]][year]+value[[i]][year-1]*inv.1.list.withshock[[i]][year]
     value.out[[i]][year]<-n.over1[[i]][year]*1000000
     value[[i]][year]<-value[[i]][year-1]+value.in[[i]][year]-value.out[[i]][year]}
    else
    {discount[year]<-1
     value.in[[i]][year]<-p*discount[year]*n.new1[[i]][year]
     value.out[[i]][year]<-n.over1[[i]][year]*1000000
     value[[i]][year]<-value.in[[i]][year]-value.out[[i]][year]}
    if (value[[i]][year]>=0)
    {bankrupt[[i]][year]<-0
    } 
    else
    {bankrupt[[i]][year]<-1
    }
  }
  if (sum(bankrupt[[i]])>0)
  {bankrupt.result[i]<-1}
  else
  {bankrupt.result[i]<-0}
}
par(mfrow=c(3,1))
plot.ts(value[[500]][1:100]);abline(h=0,col="red")
plot.ts(value.in[[500]][1:100]);abline(h=0,col="red")
plot.ts(value.out[[500]][1:100]);abline(h=0,col="red")
#****************************************************************
#****************************************************************
p<-p.test[180]
for (i in 1:1000)
{
  value.risk[[i]]<-as.vector(rep(NA,100))
  value.norisk[[i]]<-as.vector(rep(NA,100))
  value.in[[i]]<-as.vector(rep(NA,100))
  value.out[[i]]<-as.vector(rep(NA,100))
  value.1[[i]]<-as.vector(rep(NA,100))
  value.2[[i]]<-as.vector(rep(NA,100))
  bankrupt.c[[i]]<-as.vector(rep(NA,100))
  for (year in 1:100)
  {
    if (year!=1)
    {discount[year]<-discount[year-1]*(1+int.list.withshock[[i]][year-1])
     if ((year%%10)==1)
     {
       value.in[[i]][year]<-p*discount[year]*n.new1[[i]][year]+value.norisk[[i]][year-1]*int.list.withshock[[i]][year]+value.risk[[i]][year-1]*inv.10.list.withshock[[i]][year-10]
       value.out[[i]][year]<-n.over1[[i]][year]*1000000
       value.1[[i]][year]<-value.1[[i]][year-1]+value.in[[i]][year]-value.out[[i]][year]
       value.risk[[i]][year]<-0.5*value.1[[i]][year]
       value.norisk[[i]][year]<-0.5*value.1[[i]][year]
       value.2[[i]][year]<-value.risk[[i]][year]+value.norisk[[i]][year]
     }
     else
     { 
       value.in[[i]][year]<-p*discount[year]*n.new1[[i]][year]+value.norisk[[i]][year-1]*int.list.withshock[[i]][year]
       value.out[[i]][year]<-n.over1[[i]][year]*1000000
       value.1[[i]][year]<-value.1[[i]][year-1]+value.in[[i]][year]-value.out[[i]][year]
       value.risk[[i]][year]<-value.risk[[i]][year-1]
       value.norisk[[i]][year]<-value.norisk[[i]][year-1]+value.in[[i]][year]-value.out[[i]][year]
       value.2[[i]][year]<-value.risk[[i]][year]+value.norisk[[i]][year] 
     }
    }
    else
    { discount[year]<-1
      value.in[[i]][year]<-p*discount[year]*n.new1[[i]][year]
      value.out[[i]][year]<-n.over1[[i]][year]*1000000
      value.1[[i]][year]<-value.in[[i]][year]-value.out[[i]][year]
      value.risk[[i]][year]<-0.5*value.1[[i]][year]
      value.norisk[[i]][year]<-0.5*value.1[[i]][year]
      value.2[[i]][year]<-value.risk[[i]][year]+value.norisk[[i]][year]
    }
    if (value.1[[i]][year]>=0)
    {bankrupt.c[[i]][year]<-0} 
    else
    {bankrupt.c[[i]][year]<-1
    }
  }
  if (sum(bankrupt.c[[i]])>0)
  {bankrupt.c.result[i]<-1}
  else
  {bankrupt.c.result[i]<-0}
}
plot.ts(value.1[[500]][1:100]);abline(h=0,col="red")
plot.ts(value.risk[[500]][1:100]);abline(h=0,col="red")
plot.ts(value.norisk[[500]][1:100]);abline(h=0,col="red")

p<-p.test[30]
for (i in 1:1000)
{
  value.risk[[i]]<-as.vector(rep(NA,100))
  value.norisk[[i]]<-as.vector(rep(NA,100))
  value.in[[i]]<-as.vector(rep(NA,100))
  value.out[[i]]<-as.vector(rep(NA,100))
  value.1[[i]]<-as.vector(rep(NA,100))
  value.2[[i]]<-as.vector(rep(NA,100))
  bankrupt.c[[i]]<-as.vector(rep(NA,100))
  for (year in 1:100)
  {
    if (year!=1)
    {discount[year]<-discount[year-1]*(1+int.list.withshock[[i]][year-1])
     if ((year%%10)==1)
     {
       value.in[[i]][year]<-p*discount[year]*n.new1[[i]][year]+value.norisk[[i]][year-1]*int.list.withshock[[i]][year]+value.risk[[i]][year-1]*inv.10.list.withshock[[i]][year-10]
       value.out[[i]][year]<-n.over1[[i]][year]*1000000
       value.1[[i]][year]<-value.1[[i]][year-1]+value.in[[i]][year]-value.out[[i]][year]
       value.risk[[i]][year]<-0.5*value.1[[i]][year]
       value.norisk[[i]][year]<-0.5*value.1[[i]][year]
       value.2[[i]][year]<-value.risk[[i]][year]+value.norisk[[i]][year]
     }
     else
     { 
       value.in[[i]][year]<-p*discount[year]*n.new1[[i]][year]+value.norisk[[i]][year-1]*int.list.withshock[[i]][year]
       value.out[[i]][year]<-n.over1[[i]][year]*1000000
       value.1[[i]][year]<-value.1[[i]][year-1]+value.in[[i]][year]-value.out[[i]][year]
       value.risk[[i]][year]<-value.risk[[i]][year-1]
       value.norisk[[i]][year]<-value.norisk[[i]][year-1]+value.in[[i]][year]-value.out[[i]][year]
       value.2[[i]][year]<-value.risk[[i]][year]+value.norisk[[i]][year] 
     }
    }
    else
    { discount[year]<-1
      value.in[[i]][year]<-p*discount[year]*n.new1[[i]][year]
      value.out[[i]][year]<-n.over1[[i]][year]*1000000
      value.1[[i]][year]<-value.in[[i]][year]-value.out[[i]][year]
      value.risk[[i]][year]<-0.5*value.1[[i]][year]
      value.norisk[[i]][year]<-0.5*value.1[[i]][year]
      value.2[[i]][year]<-value.risk[[i]][year]+value.norisk[[i]][year]
    }
    if (value.1[[i]][year]>=0)
    {bankrupt.c[[i]][year]<-0} 
    else
    {bankrupt.c[[i]][year]<-1
    }
  }
  if (sum(bankrupt.c[[i]])>0)
  {bankrupt.c.result[i]<-1}
  else
  {bankrupt.c.result[i]<-0}
}
plot.ts(value.1[[500]][1:100]);abline(h=0,col="red")
plot.ts(value.risk[[500]][1:100]);abline(h=0,col="red")
plot.ts(value.norisk[[500]][1:100]);abline(h=0,col="red")
#****************************************************************
#****************************************************************

p<-p.test[188]
for (i in 1:1000)
{
  value[[i]]<-as.vector(rep(NA,100))
  value.in[[i]]<-as.vector(rep(NA,100))
  value.out[[i]]<-as.vector(rep(NA,100))
  bankrupt.A[[i]]<-as.vector(rep(NA,100))
  for (year in 1:100)
  {
    if (year!=1)
    {discount[year]<-discount[year-1]*(1+int.list.withshock[[i]][year-1])
     value.in[[i]][year]<-p*discount[year]*n.new1[[i]][year]+value[[i]][year-1]*combo[[i]][year]
     value.out[[i]][year]<-n.over1[[i]][year]*1000000
     value[[i]][year]<-value[[i]][year-1]+value.in[[i]][year]-value.out[[i]][year]}
    else
    {discount[year]<-1
     value.in[[i]][year]<-p*discount[year]*n.new1[[i]][year]
     value.out[[i]][year]<-n.over1[[i]][year]*1000000
     value[[i]][year]<-value.in[[i]][year]-value.out[[i]][year]}
    if (value[[i]][year]>=0)
    {bankrupt.A[[i]][year]<-0} 
    else
    {bankrupt.A[[i]][year]<-1}
  }
  if (sum(bankrupt.A[[i]])>0)
  {bankrupt.A.result[i]<-1}
  else
  {bankrupt.A.result[i]<-0}
}
plot.ts(value[[500]][1:100]);abline(h=0,col="red")
plot.ts(value.in[[500]][1:100]);abline(h=0,col="red")
plot.ts(value.out[[500]][1:100]);abline(h=0,col="red")

p<-p.test[30]
for (i in 1:1000)
{
  value[[i]]<-as.vector(rep(NA,100))
  value.in[[i]]<-as.vector(rep(NA,100))
  value.out[[i]]<-as.vector(rep(NA,100))
  bankrupt.A[[i]]<-as.vector(rep(NA,100))
  for (year in 1:100)
  {
    if (year!=1)
    {discount[year]<-discount[year-1]*(1+int.list.withshock[[i]][year-1])
     value.in[[i]][year]<-p*discount[year]*n.new1[[i]][year]+value[[i]][year-1]*combo[[i]][year]
     value.out[[i]][year]<-n.over1[[i]][year]*1000000
     value[[i]][year]<-value[[i]][year-1]+value.in[[i]][year]-value.out[[i]][year]}
    else
    {discount[year]<-1
     value.in[[i]][year]<-p*discount[year]*n.new1[[i]][year]
     value.out[[i]][year]<-n.over1[[i]][year]*1000000
     value[[i]][year]<-value.in[[i]][year]-value.out[[i]][year]}
    if (value[[i]][year]>=0)
    {bankrupt.A[[i]][year]<-0} 
    else
    {bankrupt.A[[i]][year]<-1}
  }
  if (sum(bankrupt.A[[i]])>0)
  {bankrupt.A.result[i]<-1}
  else
  {bankrupt.A.result[i]<-0}
}
plot.ts(value[[500]][1:100]);abline(h=0,col="red")
plot.ts(value.in[[500]][1:100]);abline(h=0,col="red")
plot.ts(value.out[[500]][1:100]);abline(h=0,col="red")
#****************************************************************

##########################################
# situation 2
##########################################

##########################################################
p.test<-seq(from=0, to=max(p.all2),1000)
p<-p.test[62]

for (i in 1:1000)
{
  value[[i]]<-as.vector(rep(NA,100))
  value.in[[i]]<-as.vector(rep(NA,100))
  value.out[[i]]<-as.vector(rep(NA,100))
  bankrupt[[i]]<-as.vector(rep(NA,100))
  for (year in 1:100)
  {
    if (year!=1)
    {discount[year]<-discount[year-1]*(1+int.list[[i]][year-1])
     value.in[[i]][year]<-p*discount[year]*n.new2[[i]][year]+value[[i]][year-1]*inv.1.list[[i]][year]
     value.out[[i]][year]<-n.over2[[i]][year]*1000000
     value[[i]][year]<-value[[i]][year-1]+value.in[[i]][year]-value.out[[i]][year]}
    else
    {discount[year]<-1
     value.in[[i]][year]<-p*discount[year]*n.new2[[i]][year]
     value.out[[i]][year]<-n.over2[[i]][year]*1000000
     value[[i]][year]<-value.in[[i]][year]-value.out[[i]][year]}
    if (value[[i]][year]>=0)
    {bankrupt[[i]][year]<-0
    } 
    else
    {bankrupt[[i]][year]<-1
    }
  }
  if (sum(bankrupt[[i]])>0)
  {bankrupt.result[i]<-1}
  else
  {bankrupt.result[i]<-0}
}
par(mfrow=c(3,1))
plot.ts(value[[500]][1:100]);abline(h=0,col="red")
plot.ts(value.in[[500]][1:100]);abline(h=0,col="red")
plot.ts(value.out[[500]][1:100]);abline(h=0,col="red")

p<-p.test[30] # at the beginning, the company's capital is used up. However, in the end, it gets back on track.
for (i in 1:1000)
{
  value[[i]]<-as.vector(rep(NA,100))
  value.in[[i]]<-as.vector(rep(NA,100))
  value.out[[i]]<-as.vector(rep(NA,100))
  bankrupt[[i]]<-as.vector(rep(NA,100))
  for (year in 1:100)
  {
    if (year!=1)
    {discount[year]<-discount[year-1]*(1+int.list[[i]][year-1])
     value.in[[i]][year]<-p*discount[year]*n.new2[[i]][year]+value[[i]][year-1]*inv.1.list[[i]][year]
     value.out[[i]][year]<-n.over2[[i]][year]*1000000
     value[[i]][year]<-value[[i]][year-1]+value.in[[i]][year]-value.out[[i]][year]}
    else
    {discount[year]<-1
     value.in[[i]][year]<-p*discount[year]*n.new2[[i]][year]
     value.out[[i]][year]<-n.over2[[i]][year]*1000000
     value[[i]][year]<-value.in[[i]][year]-value.out[[i]][year]}
    if (value[[i]][year]>=0)
    {bankrupt[[i]][year]<-0
    } 
    else
    {bankrupt[[i]][year]<-1
    }
  }
  if (sum(bankrupt[[i]])>0)
  {bankrupt.result[i]<-1}
  else
  {bankrupt.result[i]<-0}
}
par(mfrow=c(3,1))
plot.ts(value[[500]][1:100]);abline(h=0,col="red")
plot.ts(value.in[[500]][1:100]);abline(h=0,col="red")
plot.ts(value.out[[500]][1:100]);abline(h=0,col="red")
#****************************************************************
#****************************************************************
p<-p.test[114]
for (i in 1:1000)
{
  value.risk[[i]]<-as.vector(rep(NA,100))
  value.norisk[[i]]<-as.vector(rep(NA,100))
  value.in[[i]]<-as.vector(rep(NA,100))
  value.out[[i]]<-as.vector(rep(NA,100))
  value.1[[i]]<-as.vector(rep(NA,100))
  value.2[[i]]<-as.vector(rep(NA,100))
  bankrupt.c[[i]]<-as.vector(rep(NA,100))
  for (year in 1:100)
  {
    if (year!=1)
    {discount[year]<-discount[year-1]*(1+int.list[[i]][year-1])
     if ((year%%10)==1)
     {
       value.in[[i]][year]<-p*discount[year]*n.new2[[i]][year]+value.norisk[[i]][year-1]*int.list[[i]][year]+value.risk[[i]][year-1]*inv.10.list[[i]][year-10]
       value.out[[i]][year]<-n.over2[[i]][year]*1000000
       value.1[[i]][year]<-value.1[[i]][year-1]+value.in[[i]][year]-value.out[[i]][year]
       value.risk[[i]][year]<-0.5*value.1[[i]][year]
       value.norisk[[i]][year]<-0.5*value.1[[i]][year]
       value.2[[i]][year]<-value.risk[[i]][year]+value.norisk[[i]][year]
     }
     else
     { 
       value.in[[i]][year]<-p*discount[year]*n.new2[[i]][year]+value.norisk[[i]][year-1]*int.list[[i]][year]
       value.out[[i]][year]<-n.over2[[i]][year]*1000000
       value.1[[i]][year]<-value.1[[i]][year-1]+value.in[[i]][year]-value.out[[i]][year]
       value.risk[[i]][year]<-value.risk[[i]][year-1]
       value.norisk[[i]][year]<-value.norisk[[i]][year-1]+value.in[[i]][year]-value.out[[i]][year]
       value.2[[i]][year]<-value.risk[[i]][year]+value.norisk[[i]][year] 
     }
    }
    else
    { discount[year]<-1
      value.in[[i]][year]<-p*discount[year]*n.new2[[i]][year]
      value.out[[i]][year]<-n.over2[[i]][year]*1000000
      value.1[[i]][year]<-value.in[[i]][year]-value.out[[i]][year]
      value.risk[[i]][year]<-0.5*value.1[[i]][year]
      value.norisk[[i]][year]<-0.5*value.1[[i]][year]
      value.2[[i]][year]<-value.risk[[i]][year]+value.norisk[[i]][year]
    }
    if (value.1[[i]][year]>=0)
    {bankrupt.c[[i]][year]<-0} 
    else
    {bankrupt.c[[i]][year]<-1
    }
  }
  if (sum(bankrupt.c[[i]])>0)
  {bankrupt.c.result[i]<-1}
  else
  {bankrupt.c.result[i]<-0}
}
plot.ts(value.1[[500]][1:100]);abline(h=0,col="red")
plot.ts(value.risk[[500]][1:100]);abline(h=0,col="red")
plot.ts(value.norisk[[500]][1:100]);abline(h=0,col="red")

p<-p.test[30]
for (i in 1:1000)
{
  value.risk[[i]]<-as.vector(rep(NA,100))
  value.norisk[[i]]<-as.vector(rep(NA,100))
  value.in[[i]]<-as.vector(rep(NA,100))
  value.out[[i]]<-as.vector(rep(NA,100))
  value.1[[i]]<-as.vector(rep(NA,100))
  value.2[[i]]<-as.vector(rep(NA,100))
  bankrupt.c[[i]]<-as.vector(rep(NA,100))
  for (year in 1:100)
  {
    if (year!=1)
    {discount[year]<-discount[year-1]*(1+int.list[[i]][year-1])
     if ((year%%10)==1)
     {
       value.in[[i]][year]<-p*discount[year]*n.new2[[i]][year]+value.norisk[[i]][year-1]*int.list[[i]][year]+value.risk[[i]][year-1]*inv.10.list[[i]][year-10]
       value.out[[i]][year]<-n.over2[[i]][year]*1000000
       value.1[[i]][year]<-value.1[[i]][year-1]+value.in[[i]][year]-value.out[[i]][year]
       value.risk[[i]][year]<-0.5*value.1[[i]][year]
       value.norisk[[i]][year]<-0.5*value.1[[i]][year]
       value.2[[i]][year]<-value.risk[[i]][year]+value.norisk[[i]][year]
     }
     else
     { 
       value.in[[i]][year]<-p*discount[year]*n.new2[[i]][year]+value.norisk[[i]][year-1]*int.list[[i]][year]
       value.out[[i]][year]<-n.over2[[i]][year]*1000000
       value.1[[i]][year]<-value.1[[i]][year-1]+value.in[[i]][year]-value.out[[i]][year]
       value.risk[[i]][year]<-value.risk[[i]][year-1]
       value.norisk[[i]][year]<-value.norisk[[i]][year-1]+value.in[[i]][year]-value.out[[i]][year]
       value.2[[i]][year]<-value.risk[[i]][year]+value.norisk[[i]][year] 
     }
    }
    else
    { discount[year]<-1
      value.in[[i]][year]<-p*discount[year]*n.new2[[i]][year]
      value.out[[i]][year]<-n.over2[[i]][year]*1000000
      value.1[[i]][year]<-value.in[[i]][year]-value.out[[i]][year]
      value.risk[[i]][year]<-0.5*value.1[[i]][year]
      value.norisk[[i]][year]<-0.5*value.1[[i]][year]
      value.2[[i]][year]<-value.risk[[i]][year]+value.norisk[[i]][year]
    }
    if (value.1[[i]][year]>=0)
    {bankrupt.c[[i]][year]<-0} 
    else
    {bankrupt.c[[i]][year]<-1
    }
  }
  if (sum(bankrupt.c[[i]])>0)
  {bankrupt.c.result[i]<-1}
  else
  {bankrupt.c.result[i]<-0}
}
plot.ts(value.1[[500]][1:100]);abline(h=0,col="red")
plot.ts(value.risk[[500]][1:100]);abline(h=0,col="red")
plot.ts(value.norisk[[500]][1:100]);abline(h=0,col="red")
#****************************************************************
#****************************************************************
p<-p.test[103]
for (i in 1:1000)
{
  value[[i]]<-as.vector(rep(NA,100))
  value.in[[i]]<-as.vector(rep(NA,100))
  value.out[[i]]<-as.vector(rep(NA,100))
  bankrupt.A[[i]]<-as.vector(rep(NA,100))
  for (year in 1:100)
  {
    if (year!=1)
    {discount[year]<-discount[year-1]*(1+int.list[[i]][year-1])
     value.in[[i]][year]<-p*discount[year]*n.new2[[i]][year]+value[[i]][year-1]*combo[[i]][year]
     value.out[[i]][year]<-n.over2[[i]][year]*1000000
     value[[i]][year]<-value[[i]][year-1]+value.in[[i]][year]-value.out[[i]][year]}
    else
    {discount[year]<-1
     value.in[[i]][year]<-p*discount[year]*n.new2[[i]][year]
     value.out[[i]][year]<-n.over2[[i]][year]*1000000
     value[[i]][year]<-value.in[[i]][year]-value.out[[i]][year]}
    if (value[[i]][year]>=0)
    {bankrupt.A[[i]][year]<-0} 
    else
    {bankrupt.A[[i]][year]<-1}
  }
  if (sum(bankrupt.A[[i]])>0)
  {bankrupt.A.result[i]<-1}
  else
  {bankrupt.A.result[i]<-0}
}
plot.ts(value[[500]][1:100]);abline(h=0,col="red")
plot.ts(value.in[[500]][1:100]);abline(h=0,col="red")
plot.ts(value.out[[500]][1:100]);abline(h=0,col="red")

p<-p.test[30]
for (i in 1:1000)
{
  value[[i]]<-as.vector(rep(NA,100))
  value.in[[i]]<-as.vector(rep(NA,100))
  value.out[[i]]<-as.vector(rep(NA,100))
  bankrupt.A[[i]]<-as.vector(rep(NA,100))
  for (year in 1:100)
  {
    if (year!=1)
    {discount[year]<-discount[year-1]*(1+int.list[[i]][year-1])
     value.in[[i]][year]<-p*discount[year]*n.new2[[i]][year]+value[[i]][year-1]*combo[[i]][year]
     value.out[[i]][year]<-n.over2[[i]][year]*1000000
     value[[i]][year]<-value[[i]][year-1]+value.in[[i]][year]-value.out[[i]][year]}
    else
    {discount[year]<-1
     value.in[[i]][year]<-p*discount[year]*n.new2[[i]][year]
     value.out[[i]][year]<-n.over2[[i]][year]*1000000
     value[[i]][year]<-value.in[[i]][year]-value.out[[i]][year]}
    if (value[[i]][year]>=0)
    {bankrupt.A[[i]][year]<-0} 
    else
    {bankrupt.A[[i]][year]<-1}
  }
  if (sum(bankrupt.A[[i]])>0)
  {bankrupt.A.result[i]<-1}
  else
  {bankrupt.A.result[i]<-0}
}
plot.ts(value[[500]][1:100]);abline(h=0,col="red")
plot.ts(value.in[[500]][1:100]);abline(h=0,col="red")
plot.ts(value.out[[500]][1:100]);abline(h=0,col="red")
#****************************************************************


